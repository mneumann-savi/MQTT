:alias MQTT.Logger: Logger(Logger.Formatter.StringWithLevel)

:actor MQTT.Connection
  :is IO.Actor(IO.Action)

  :let log MQTT.Logger
  :let io TCP.Engine

  // :var _is_tcp_connected Bool

  :new (ticket TCP.Connect.Ticket, @log)
    @io = TCP.Engine.new(@, --ticket)
    //@_is_tcp_connected = False

    case @io.connect_error == (
    | OSError.None |
    // ok
    |
      @log.warn -> ("Failed to connect: \(@io.connect_error.name)")
    )

  :be publish(topic_name String, payload Bytes)
    @log.info -> ("PUBLISH on \(topic_name)")

    try (
      publish_msg = MQTT.Message.Publish.new(topic_name, payload).encode!
      inspected = Bytes.from_array(publish_msg.clone.as_array)
      @log.info -> ("PUBLISH: \(inspected.format.literal)")
      @io.write_stream << --publish_msg
      try (@io.flush!)
    )

  :fun ref _on_connected
    @log.info -> ("Connected")
    //@_is_tcp_connected = True

    try (
      connect_msg = MQTT.Message.Connect.new("savi-mqtt").encode!
      inspected = Bytes.from_array(connect_msg.clone.as_array)
      @log.info -> ("CONNECT -> Writing: \(inspected.format.literal)")
      @io.write_stream << --connect_msg
    )

  :fun ref _on_writable
    @log.debug -> ("Writable")
    try (@io.flush!)

  :fun ref _on_readable
    @log.debug -> ("Bytes available")
    // XXX: This is a hack
    data  = Bytes.from_array(@io.read_stream.extract_all.as_array)
    @log.debug -> ("\(data.format.literal) [\(data.format.hex_dump)]")

  :fun ref _on_connection_closed
    @log.debug -> ("Connection closed")
  // try @io.listen.as!(TCP.Listener).dispose
  // @_is_tcp_connected = False

  :fun ref _on_connection_failed
    @log.debug -> ("Failed to connect: \(@io.connect_error.name)") 
  // @_is_tcp_connected = False

  :fun ref io_react(action IO.Action)
    case action == (
    | IO.Action.Opened |
      @_on_connected

    | IO.Action.OpenFailed |
      @_on_connection_failed

    | IO.Action.Write |
      @_on_writable

    | IO.Action.Read |
      @_on_readable

    | IO.Action.Closed |
      @_on_connection_closed
    )

    @

  :be dispose: @io.close

